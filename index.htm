<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Spaceward</title>
    <link rel="stylesheet" type="text/css" href="styles.css"> 
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        header {
            background-color: #333;
            color: white;
            padding: 10px;
            text-align: center;
        }

        nav {
            background-color: #444;
            color: white;
            text-align: center;
            padding: 10px;
        }

        nav a {
            color: white;
            text-decoration: none;
            margin: 0 10px;
        }

        nav a:hover {
            text-decoration: underline;
        }

        .content {
            padding: 20px;
        }

        .content h2 {
            color: #333;
        }

        .content p {
            color: #666;
            line-height: 1.5;
        }

        .image-gallery {
            display: flex;
            justify-content: space-between;
        }

        .image-gallery img {
            width: 30%; 
            border: 2px solid #ccc;
            border-radius: 5px;
        }

        footer {
            background-color: #E2E1E1;
            color: white;
            text-align: center;
            padding: 10px;
        }
    </style>
</head>
<body>

<header>
    <h1>Spaceward</h1>
</header>

<div class="content">
    <h2>About the Game</h2>
    <p>Below is a gameplay demo for our game!</p>
    <iframe width="560" height="315" src="https://www.youtube.com/embed/L9DNYzUr1wA" 
            title="YouTube video player" frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen>
    </iframe>
    <p>
        "Spaceward" revolves around a young engineer with dreams of exploring the universe! However, her airship isn't
	built for such a task and therefore must make the necessary improvements to it by finding the gears left in this
	Steampunk-esque floating island. With the use of her jetpack, which can grant her new abilities by finding the
	necessary batteries, getting the gears required will be a cinch!
    </p>

    <h2>My Role</h2>
    <p>
        I served as the "team lead" for our group of seven. As I was on the Tech Team, I also served as one of the game
        logic programmers as well as a level designer. Some of the things I worked on during the seven weeks of the
        project include:
   </p>

    <p>
	Implementing Animations for the Player Character
        Implementing Sounds and Music for our levels
        Designing a lot of more "back-end" features; (interactability for collectibles, menus/options)
        Designing NPC interactions 
        General level design for the overworld and cave* (cave is unfortunately not implemented as of now.)
    </p>

    <h2>Challenges in Development</h2>
    <p>
        One of the major hurdles I had was getting used to Blueprint coding, and determining which "prop" to assign the
        blueprint to. This became more difficult when adding interface and widget blueprints, which took me some time
        to figure out.
   </p>

    <p>
        Blueprinting was especially a pain for the animations of our unlockable abilities (double jump and dash), 
        which required the engine to only play the animations when the specific ability was unlocked. This became an 
        issue for the double jump, as an annoying bug was that the DJ animation were to play during every jump until 
        the player unlocked the ability because of the way it was orignally programmed.

   </p>

    <p>
        Our main goal was to make a more relaxed platformer, but also not make it too boring, so possibly our biggest
        challenge was to account for all levels of skill regarding platformer games. This also played a part in where we
        hid some of the batteries, as we wanted players to have enough options regarding batteries to get the needed
        abilities without feeling forced to collect every single collectible.
    </p>

    <h2>Solutions</h2>
    <p>
        After tinkering around with the animation blueprints Unreal provides, I was able to figure out how to properly call
        other blueprints to Unreal's animation manager. After that, it was pretty simple to structure the logic to prevent
        the Double Jump from playing until the ability had been unlocked. The Dash was also very simple, as I decided to
        just make an animation montage that played when the player pressed the dash button and only when it was unlocked.
   </p>

<div class="image-gallery" style="display: flex; justify-content: space-between;">
    <figure style="text-align: center; width: 30%;"> 
        <img src="AnimBlueprint.png" alt="Description of Gameplay Loop" style="width: 150%;"> 
        <figcaption>Animation Blueprint</figcaption>  <!-- Title below the image -->
    </figure>

    <figure style="text-align: center; width: 30%;">
        <img src="AnimDash.png" alt="Animations Diagram" style="width: 125%;">
        <figcaption>Animation Montage for Dash</figcaption>  <!-- Title under the image -->
    </figure>
</div>

    <p>
        Regarding our level design, one of the most important things was playtests and feedback. We were able to take a
        step back and determine how our scope and difficulty was. Thanks to our players, we could determine how many more
        collectibles to add to our level, and we changed up the controls to be more player friendly as well as the level
        to add a little more challenge to players who wanted that.
    </p>

    <h2>Code Structure</h2>
    <p>
        During development, I helped art team with integrating some of their assets into our game. This primarily included
        sound effects, music, and especially animations.
   </p>

    <p>
        I also was responsible for determining the ratios for the unlocks of both ship parts and abilities, as well as
        assisting the team with their placement in the level.
   </p>

    <p>
        As I was the main importer of sounds into our game, I was also responsible for the options menu, which dictated
        sound audibility, as well as other menus and widgets such as our title screen, completion messages, and others.
   </p>

<div class="image-gallery" style="display: flex; justify-content: space-between;">
    <figure style="text-align: center; width: 50%;"> 
        <img src="Spaceward_UML.png" alt="Description of Gameplay Loop" style="width: 100%;"> 
        <figcaption>Description of Gameplay Loop</figcaption>  <!-- Title below the image -->
    </figure>


    <figure style="text-align: center; width: 50%;">
        <img src="Spaceward_Animations.png" alt="Animations Diagram" style="width: 125%;">
        <figcaption>Animations Diagram</figcaption>  <!-- Title under the image -->
    </figure>
</div>

<div class="content">
    <h2>Animations</h2>
    <img src="Spaceward_Dash.gif" alt="Gameplay Feature" style="width: 75%;">
    <img src="Spaceward_DJ.gif" alt="Gameplay Feature" style="width: 75%;">
    <img src="Spaceward_Run.gif" alt="Gameplay Feature" style="width: 75%;">
</div>



    <h2>Version Control</h2>
    <p>
        Our main Version Control for this project was Git which was facilitated by the use of GitHub Desktop. This mode
        of version control was used by our entire team throughout the duration of the term.
   </p>

    <p>
        Like other teams, we originally had issues with merging conflicts because of how Git managed blueprints. The main
        issue was if more than one person modified a blueprint file, then on a branch merge Git would spit out a conflict.
        This was especially annoying at the beginning of the class until the Alpha period where we were still getting used
        to UE5 Blueprints and how to properly allocate development time. 
    </p>

    <h2>What I Learned</h2>
    <p>
        One of the more important lessons, obviously, was how to more effectively use the tools that Unreal had given me,
        which, of course, included Blueprinting. I also grew to appreciate Unreal as an engine, even if it can certainly
        be frustrating to work with. 
   </p>

    <p>
        Team management is especially important for using Git, as it can be easy to overwrite another person's progress
        or create merging issues. Having a spreadsheet or at least communicating who is working on what is especially
        important for ensuring a smooth development process.
    </p>
</div>

</body>
</html>
